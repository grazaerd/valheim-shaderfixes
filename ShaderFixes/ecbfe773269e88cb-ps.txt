// // fs custom/lit particle
// // snowstorm, some smokes in sea/area
// Texture3D<float4> t5 : register(t5);

// Texture2D<float4> t4 : register(t4);

// Texture2D<float4> t3 : register(t3);

// Texture2D<float4> t2 : register(t2);

// Texture2D<float4> t1 : register(t1);

// Texture2D<float4> t0 : register(t0);

// SamplerState s5_s : register(s5);

// SamplerState s4_s : register(s4);

// SamplerState s3_s : register(s3);

// SamplerState s2_s : register(s2);

// SamplerState s1_s : register(s1);

// SamplerState s0_s : register(s0);

// cbuffer cb4 : register(b4)
// {
  // float4 cb4[7];
// }

// cbuffer cb3 : register(b3)
// {
  // float4 cb3[1];
// }

// cbuffer cb2 : register(b2)
// {
  // float4 cb2[47];
// }

// cbuffer cb1 : register(b1)
// {
  // float4 cb1[8];
// }

// cbuffer cb0 : register(b0)
// {
  // float4 cb0[13];
// }




// // 3Dmigoto declarations
// #define cmp -


// void main(
  // float4 v0 : SV_POSITION0,
  // float4 v1 : TEXCOORD0,
  // float4 v2 : TEXCOORD1,
  // float4 v3 : TEXCOORD2,
  // float4 v4 : TEXCOORD3,
  // float4 v5 : TEXCOORD4,
  // float4 v6 : COLOR0,
  // float4 v7 : TEXCOORD5,
  // float4 v8 : TEXCOORD6,
  // float4 v9 : TEXCOORD7,
  // float4 v10 : TEXCOORD9,
  // out float4 o0 : SV_Target0)
// {
  // const float4 icb[] = { { 1.000000, 0, 0, 0},
                              // { 0, 1.000000, 0, 0},
                              // { 0, 0, 1.000000, 0},
                              // { 0, 0, 0, 1.000000} };
  // float4 r0,r1,r2,r3,r4;
  // uint4 bitmask, uiDest;
  // float4 fDest;

  // r0.xyzw = t0.Sample(s3_s, v1.xy).xyzw;
  // r0.xyzw = cb0[9].xyzw * r0.xyzw;
  // r1.xyz = v6.xyz * r0.xyz;
  // r1.w = 3;//cb0[12].w; //causes the texture to become becomes ftou instead of mov
  // r0.x = dot(r0.xyzw, icb[r1.w + 0].xyzw);
  // r0.x = v6.w * r0.x;
  // r2.xyzw = t1.Sample(s4_s, v1.xy).xyzw;
  // r2.x = r2.x * r2.w;
  // r3.xy = r2.xy + r2.xy;
  // r0.yz = r2.xy * float2(2,2) + float2(-1,-1);
  // r0.y = dot(r0.yz, r0.yz);
  // r0.y = min(1, r0.y);
  // r0.y = 1 + -r0.y;
  // r3.z = sqrt(r0.y);
  // r0.yzw = float3(-1,-1,-1) + r3.xyz;
  // r0.yzw = cb0[8].www * r0.yzw + float3(0,0,1);
  // r2.xy = v7.xy / v7.ww;
  // r2.xyzw = t2.Sample(s5_s, r2.xy).xyzw; //depth texture
  // r1.w = cb1[7].z * r2.x + cb1[7].w;
  // r1.w = 1 / r1.w;
  // r1.w = -v7.w + r1.w;
  // r1.w = saturate(r1.w / cb0[11].x);
  // r2.x = -cb0[11].y + v7.w;
  // r2.y = cb0[11].z + -cb0[11].y;
  // r2.x = saturate(r2.x / r2.y);
  // r1.w = min(r2.x, r1.w);
  // r1.w = r1.w * r1.w;
  // r2.x = cmp(0 < cb0[11].w);
  // r2.y = -cb1[4].y + v3.w;
  // r2.y = saturate(abs(r2.y) / cb0[11].w);
  // r2.y = min(r2.y, r1.w);
  // r1.w = r2.x ? r2.y : r1.w;
  // r2.x = cmp(0.5 < cb0[12].z);
  // if (r2.x != 0) {
    // r2.x = v2.w;
    // r2.z = v4.w;
    // r3.xyzw = t3.Sample(s2_s, r2.xz).xyzw;
    // r3.xy = float2(-0.5,-0.5) + r3.xy;
    // r3.xy = r3.xy * float2(0.00300000003,0.00300000003) + float2(0.5,0.5);
    // r3.zw = -cb0[8].xz + r2.xz;
    // r3.xy = r3.zw * float2(0.00999999978,0.00999999978) + r3.xy;
    // r4.xyzw = t4.Sample(s1_s, r3.xy).xyzw;
    // r2.y = v3.w;
    // r2.xyz = -cb0[8].xyz + r2.xyz;
    // r2.x = dot(r2.xyz, r2.xyz);
    // r2.yz = float2(0.5,0.5) + -r3.xy;
    // r2.y = dot(r2.yz, r2.yz);
    // r2.xy = sqrt(r2.xy);
    // r2.y = -0.400000006 + r2.y;
    // r2.y = saturate(10.000001 * r2.y);
    // r2.z = r2.y * -2 + 3;
    // r2.y = r2.y * r2.y;
    // r2.y = -r2.z * r2.y + 1;
    // r2.x = -r4.x * 100 + r2.x;
    // r2.x = cmp(r2.x < 0.100000001);
    // r2.y = 1 + -r2.y;
    // r2.x = r2.x ? 1 : r2.y;
    // r1.w = min(r2.x, r1.w);
  // }
  // r2.x = -30 + v3.w;
  // r2.x = saturate(r2.x / cb0[11].x);
  // r1.w = min(r2.x, r1.w);
  // r2.w = r1.w * r0.x;
  // // r0.x = cmp(cb4[0].x == 1.000000);
  // // if (r0.x != 0) {
    // // r0.x = cmp(cb4[0].y == 1.000000);
    // // r3.xyz = cb4[2].xyz * v3.www;
    // // r3.xyz = cb4[1].xyz * v2.www + r3.xyz;
    // // r3.xyz = cb4[3].xyz * v4.www + r3.xyz;
    // // r3.xyz = cb4[4].xyz + r3.xyz;
    // // r4.y = v2.w;
    // // r4.z = v3.w;
    // // r4.w = v4.w;
    // // r3.xyz = r0.xxx ? r3.xyz : r4.yzw;
    // // r3.xyz = -cb4[6].xyz + r3.xyz;
    // // r3.yzw = cb4[5].xyz * r3.xyz;
    // // r0.x = r3.y * 0.25 + 0.75;
    // // r1.w = cb4[0].z * 0.5 + 0.75;
    // // r3.x = max(r1.w, r0.x);
    // // r3.xyzw = t5.Sample(s0_s, r3.xzw).xyzw;
  // // } else {
    // r3.xyzw = float4(1,1,1,1);
  // // }
  // r0.x = 1.5; //added to increase the opacity
  // // r0.x = saturate(dot(r3.xyzw, cb2[46].xyzw));
  // // r3.x = dot(v2.xyz, r0.yzw);
  // // r3.y = dot(v3.xyz, r0.yzw);
  // // r3.z = dot(v4.xyz, r0.yzw);
  // // r0.y = dot(r3.xyz, r3.xyz);
  // // r0.y = rsqrt(r0.y);
  // r0.yzw = r3.xyz * r0.yyy;
  // r3.xyz = v9.xyz * r1.xyz;
  // // r0.y = dot(r0.yzw, cb2[0].xyz);
  // r0.y = max(0, r0.y);
  // r1.xyz = cb0[2].xyz * r1.xyz;
  // r0.xzw = r1.xyz * r0.xxx;
  // r0.y = -1 + r0.y;
  // r0.y = cb0[4].x * r0.y + 1;
  // r2.xyz = r0.xzw * r0.yyy;
  // r3.w = 0;
  // r0.xyzw = r3.xyzw + r2.xyzw;
  // r0.xyz = cb0[10].xyz + r0.xyz;
  // r1.x = dot(-v8.xyz, -v8.xyz);
  // r1.x = rsqrt(r1.x);
  // r1.xyz = -v8.xyz * r1.xxx;
  // r1.x = saturate(dot(r1.xyz, cb0[6].xyz));
  // r1.yzw = log2(cb0[5].xyz);
  // r1.yzw = float3(2.20000005,2.20000005,2.20000005) * r1.yzw;
  // r1.yzw = exp2(r1.yzw);
  // r1.yzw = -cb3[0].xyz + r1.yzw;
  // r1.xyz = r1.xxx * r1.yzw + cb3[0].xyz;
  // r1.w = cb0[6].w * -v5.w;
  // r1.w = exp2(r1.w);
  // r1.w = min(1, r1.w);
  // r1.w = 1 + -r1.w;
  // r2.x = cb0[7].y + -v5.w;
  // r2.y = cb0[7].y + -cb0[7].x;
  // r2.x = saturate(r2.x / r2.y);
  // r2.x = 1 + -r2.x;
  // r1.w = max(r2.x, r1.w);
  // r1.xyz = r1.xyz + -r0.xyz;
  // o0.xyz = r1.www * r1.xyz + r0.xyz;
  // o0.w = r0.w;
  // return;
// }

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb3
// {
//
//   float4 cb3;                        // Offset:    0 Size:    16
//
// }
//
// cbuffer cb1
// {
//
//   float4 cb1[8];                     // Offset:    0 Size:   128
//
// }
//
// cbuffer cb0
// {
//
//   float4 cb0[13];                    // Offset:    0 Size:   208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// s1_s                              sampler      NA          NA             s1      1 
// s2_s                              sampler      NA          NA             s2      1 
// s3_s                              sampler      NA          NA             s3      1 
// s4_s                              sampler      NA          NA             s4      1 
// s5_s                              sampler      NA          NA             s5      1 
// t0                                texture  float4          2d             t0      1 
// t1                                texture  float4          2d             t1      1 
// t2                                texture  float4          2d             t2      1 
// t3                                texture  float4          2d             t3      1 
// t4                                texture  float4          2d             t4      1 
// cb0                               cbuffer      NA          NA            cb0      1 
// cb1                               cbuffer      NA          NA            cb1      1 
// cb3                               cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float      w
// TEXCOORD                 2   xyzw        3     NONE   float      w
// TEXCOORD                 3   xyzw        4     NONE   float      w
// TEXCOORD                 4   xyzw        5     NONE   float      w
// COLOR                    0   xyzw        6     NONE   float   xyzw
// TEXCOORD                 5   xyzw        7     NONE   float   xy w
// TEXCOORD                 6   xyzw        8     NONE   float   xyz 
// TEXCOORD                 7   xyzw        9     NONE   float   xyz 
// TEXCOORD                 9   xyzw       10     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_constantbuffer CB0[13], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.w
dcl_input_ps linear v3.w
dcl_input_ps linear v4.w
dcl_input_ps linear v5.w
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyw
dcl_input_ps linear v8.xyz
dcl_input_ps linear v9.xyz
dcl_output o0.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s3
mul r0.xyzw, r0.xyzw, cb0[9].xyzw
mul r0.xyzw, r0.xyzw, v6.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.xy, v1.xyxx, t1.xwyz, s4
dp2 r1.x, r1.xxxx, r1.yyyy
add r1.x, r1.x, l(-1.000000)
mul r1.x, r1.x, cb0[8].w
div r1.yz, v7.xxyx, v7.wwww
sample_indexable(texture2d)(float,float,float,float) r1.y, r1.yzyy, t2.yxzw, s5
mad r1.y, cb1[7].z, r1.y, cb1[7].w
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
add r1.y, r1.y, -v7.w
div_sat r1.y, r1.y, cb0[11].x
add r1.z, v7.w, -cb0[11].y
add r1.w, -cb0[11].y, cb0[11].z
div_sat r1.z, r1.z, r1.w
min r1.y, r1.y, r1.z
mul r1.y, r1.y, r1.y
lt r1.z, l(0.000000), cb0[11].w
add r1.w, v3.w, -cb1[4].y
div_sat r1.w, |r1.w|, cb0[11].w
min r1.w, r1.y, r1.w
movc r1.y, r1.z, r1.w, r1.y
lt r1.z, l(0.500000), cb0[12].z
if_nz r1.z
  mov r2.x, v2.w
  mov r2.z, v4.w
  sample_indexable(texture2d)(float,float,float,float) r1.zw, r2.xzxx, t3.zwxy, s2
  add r1.zw, r1.zzzw, l(0.000000, 0.000000, -0.500000, -0.500000)
  mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.003000, 0.003000), l(0.000000, 0.000000, 0.500000, 0.500000)
  add r3.xy, r2.xzxx, -cb0[8].xzxx
  mad r1.zw, r3.xxxy, l(0.000000, 0.000000, 0.010000, 0.010000), r1.zzzw
  sample_indexable(texture2d)(float,float,float,float) r2.w, r1.zwzz, t4.yzwx, s1
  mov r2.y, v3.w
  add r2.xyz, r2.xyzx, -cb0[8].xyzx
  dp3 r2.x, r2.xyzx, r2.xyzx
  add r1.zw, -r1.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
  dp2 r1.z, r1.zwzz, r1.zwzz
  sqrt r1.w, r2.x
  sqrt r1.z, r1.z
  add r1.z, r1.z, l(-0.400000)
  mul_sat r1.z, r1.z, l(10.000001)
  mad r2.x, r1.z, l(-2.000000), l(3.000000)
  mul r1.z, r1.z, r1.z
  mad r1.z, -r2.x, r1.z, l(1.000000)
  mad r1.w, r2.w, l(-100.000000), r1.w
  lt r1.w, r1.w, l(0.100000)
  add r1.z, -r1.z, l(1.000000)
  movc r1.z, r1.w, l(1.000000), r1.z
  min r1.y, r1.y, r1.z
endif 
add r1.z, v3.w, l(-30.000000)
div_sat r1.z, r1.z, cb0[11].x
min r1.y, r1.y, r1.z
mul r2.w, r0.w, r1.y
mul r3.xyz, r0.xyzx, v9.xyzx
max r0.w, r1.x, l(0.000000)
mul r0.xyz, r0.xyzx, cb0[2].xyzx
mul r0.xyz, r0.xyzx, l(1.500000, 1.500000, 1.500000, 0.000000)
add r0.w, r0.w, l(-1.000000)
mad r0.w, cb0[4].x, r0.w, l(1.000000)
mul r2.xyz, r0.wwww, r0.xyzx
mov r3.w, l(0)
add r0.xyzw, r2.xyzw, r3.xyzw
add r0.xyz, r0.xyzx, cb0[10].xyzx
dp3 r1.x, -v8.xyzx, -v8.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, -v8.xyzx
dp3_sat r1.x, r1.xyzx, cb0[6].xyzx
log r1.yzw, cb0[5].xxyz
mul r1.yzw, r1.yyzw, l(0.000000, 2.200000, 2.200000, 2.200000)
exp r1.yzw, r1.yyzw
add r1.yzw, r1.yyzw, -cb3[0].xxyz
mad r1.xyz, r1.xxxx, r1.yzwy, cb3[0].xyzx
mul r1.w, -v5.w, cb0[6].w
exp r1.w, r1.w
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
add r2.x, -v5.w, cb0[7].y
add r2.y, -cb0[7].x, cb0[7].y
div_sat r2.x, r2.x, r2.y
add r2.x, -r2.x, l(1.000000)
max r1.w, r1.w, r2.x
add r1.xyz, -r0.xyzx, r1.xyzx
mad o0.xyz, r1.wwww, r1.xyzx, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 87 instruction slots used
